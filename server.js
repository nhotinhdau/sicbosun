const express = require('express');
const axios = require('axios');
const app = express();
const PORT = process.env.PORT || 3000;

// URL API g·ªëc
const SOURCE_API_URL = 'https://api.wsktnus8.net/v2/history/getLastResult?gameId=ktrng_3979&size=100&tableId=39791215743193&curPage=1';

// Cache l∆∞u d·ªØ li·ªáu
let latestResult = null;
let lastFetchTime = 0;
const CACHE_LIFETIME = 3000; // Th·ªùi gian cache: 3 gi√¢y

// H√†m fetch API g·ªëc v·ªõi c∆° ch·∫ø th·ª≠ l·∫°i
async function fetchDataWithRetry(retries = 3) {
  const now = Date.now();
  // S·ª≠ d·ª•ng cache n·∫øu d·ªØ li·ªáu v·∫´n c√≤n m·ªõi
  if (now - lastFetchTime < CACHE_LIFETIME && latestResult) {
    console.log("‚úÖ D√πng d·ªØ li·ªáu t·ª´ cache.");
    return latestResult;
  }

  let error = null;
  for (let i = 0; i < retries; i++) {
    try {
      console.log(`‚è≥ ƒêang th·ª≠ l·∫•y d·ªØ li·ªáu t·ª´ API g·ªëc (l·∫ßn ${i + 1}/${retries})...`);
      const response = await axios.get(SOURCE_API_URL, {
        headers: {
          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/120 Safari/537.36",
          "Accept": "application/json,text/plain,/"
        }
      });

      const data = response.data;
      const raw = data?.list?.[0] || data;

      if (!raw || !raw.id || !raw.dices) {
        throw new Error("API g·ªëc tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
      }

      // Chu·∫©n h√≥a sang ƒë·ªãnh d·∫°ng m·ªõi
      latestResult = {
        gameNum: `#${raw.id}`,
        score: raw.point,
        resultType: raw.resultTruyenThong?.toLowerCase() === "tai" ? 1 : raw.resultTruyenThong?.toLowerCase() === "xiu" ? 2 : 3,
        facesList: raw.dices
      };

      lastFetchTime = Date.now();
      console.log("‚úÖ L·∫•y d·ªØ li·ªáu th√†nh c√¥ng!");
      return latestResult;
      
    } catch (err) {
      error = err;
      if (err.response && err.response.status === 429) {
        const delay = Math.pow(2, i) * 1000; // Exponential backoff: 1s, 2s, 4s
        console.warn(`‚ö†Ô∏è L·ªói 429 (Too Many Requests). ƒêang ƒë·ª£i ${delay / 1000} gi√¢y ƒë·ªÉ th·ª≠ l·∫°i...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        console.error(`‚ùå L·ªói khi g·ªçi API g·ªëc: ${err.message}`);
        throw err; // N√©m l·ªói n·∫øu kh√¥ng ph·∫£i l√† 429
      }
    }
  }
  // N·∫øu t·∫•t c·∫£ c√°c l·∫ßn th·ª≠ l·∫°i ƒë·ªÅu th·∫•t b·∫°i, n√©m l·ªói cu·ªëi c√πng
  throw error;
}

// Endpoint
app.get('/api/lxk', async (req, res) => {
  try {
    const result = await fetchDataWithRetry();
    res.json(result);
  } catch (error) {
    res.status(500).json({
      error: "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ API g·ªëc.",
      details: error.message
    });
  }
});

app.get('/', (req, res) => {
  res.send('üëâ API Phi√™n G·∫ßn Nh·∫•t. Truy c·∫≠p /api/lxk ƒë·ªÉ xem k·∫øt qu·∫£.');
});

app.listen(PORT, () => {
  console.log(`üöÄ Server ch·∫°y tr√™n c·ªïng ${PORT}`);
});

                      
